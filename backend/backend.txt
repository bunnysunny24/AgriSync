A. Plant Price Detection:
python scripts/preprocess_data.py  
python scripts/train_models.py
python scripts/predict.py 
python scripts/predict_with_graph.py

B. Plant Disease Detection:
python scripts/preprocess_plantdoc.py
python scripts/train_plantdoc_model.py
python scripts/predict_plantdoc.py

C. Weather Prediction:
python scripts/fetch_weather.py
python scripts/train_weather_model.py
python scripts/predict_weather.py
python scripts/weather_alerts.py

D. Soil Analysis:
python scripts/train_soil_model.py 
python scripts/predict_soil.py

uvicorn scripts.main:app --host 0.0.0.0 --port=8000 --reload
uvicorn scripts.main:app --reload

print(f"üîç Predicting soil type for: {image_path}")

    img_tensor = load_and_prepare_image(image_path)
    if img_tensor is None:
        print("‚ùå Image preprocessing failed.")
        return None

    print("üì¶ Loading model...")
    if not os.path.exists(MODEL_PATH):
        print(f"‚ùå Model not found at {MODEL_PATH}")
        return None

    try:
        model = tf.keras.models.load_model(MODEL_PATH)
    except Exception as e:
        print(f"‚ùå Error loading model: {e}")
        return None

    try:
        prediction = model.predict(img_tensor)[0]
        predicted_index = np.argmax(prediction)
        confidence = prediction[predicted_index] * 100
        predicted_class = CLASS_NAMES[predicted_index]

        print(f"‚úÖ Prediction: {predicted_class} ({confidence:.2f}%)")
    except Exception as e:
        print(f"‚ùå Prediction failed: {e}")
        return None

    soil_data = SOIL_INFO.get(predicted_class)
    return {
        "predicted_class": predicted_class,
        "confidence": round(confidence, 2),
        "about": soil_data['notes'] if soil_data else "",
        "crops": soil_data['crops'] if soil_data else [],
        "care": soil_data['care'] if soil_data else []
    }
